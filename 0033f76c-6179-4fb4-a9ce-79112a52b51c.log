"{\"ip_address\":null,\"time\":\"2023-05-06T09:58:35.270Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"e139884774504ae997d7e38e6be6da88\",\"cell_num\":0,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-06T09:58:58.001Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"e139884774504ae997d7e38e6be6da88\",\"cell_num\":0,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":23}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":null,\"time\":\"2023-05-06T09:58:58.174Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"save_notebook\",\"cell_source\":\"[\n  {\n    \\"id\\": \\"e139884774504ae997d7e38e6be6da88\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"# # Do not forget to check if your notebook log collection plugin is working\\nfrom mining_extension import check_logging\\ncheck_logging(\\\\"http://3.249.245.244:9999\\\\")\\",\n    \\"execution_count\\": 1\n  },\n  {\n    \\"id\\": \\"a47800e62cbe40c1ad4003b2879f5f03\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install pandas\\n\\",\n    \\"execution_count\\": 3\n  },\n  {\n    \\"id\\": \\"832d6ff5591b46a0ab57d4f57fb6bff4\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install sklearn\\",\n    \\"execution_count\\": 10\n  },\n  {\n    \\"id\\": \\"da13661b37a24a319d339a52b96bd0c7\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"!pip install catboost\\n!pip install xgboost\\",\n    \\"execution_count\\": 7\n  },\n  {\n    \\"id\\": \\"fcbfe01318394ee78c110d6efe344931\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"import pandas as pd\\nimport sklearn\\nimport catboost\\nimport sklearn.feature_extraction.text\\nfrom sklearn.feature_extraction.text import TfidfVectorizer\\nfrom sklearn.tree import DecisionTreeClassifier\\nfrom catboost import CatBoostClassifier\\nfrom sklearn.linear_model import LogisticRegression\\nfrom sklearn.ensemble import RandomForestClassifier\\nfrom sklearn.metrics import roc_auc_score\\nfrom sklearn.model_selection import train_test_split\\nimport matplotlib.pyplot as plt\\nfrom xgboost import XGBClassifier\\nfrom sklearn.metrics import accuracy_score\\",\n    \\"execution_count\\": 11\n  },\n  {\n    \\"id\\": \\"7d2860da0671406d8d15962b649beae7\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"import zipfile\\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip", "r") as zip_ref:\\n    zip_ref.extractall("data/task1")\\",\n    \\"execution_count\\": 12\n  },\n  {\n    \\"id\\": \\"defb0827c33841a685711f470afa7635\\",\n    \\"cell_type\\": \\"markdown\\",\n    \\"source\\": \\"# Extracting data\\"\n  },\n  {\n    \\"id\\": \\"36e24757a6bc495187309af12ff06e93\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"data = pd.read_csv("data/task1/jetnet_logs.txt", sep="\\\\t")\\ndata.head()\\",\n    \\"execution_count\\": 24\n  },\n  {\n    \\"id\\": \\"eec24057138749a58f8359e390ccdbba\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"with open("data/task1/jetnet_logs.txt") as f:\\n    contents = f.readline()\\n    print(contents)\\",\n    \\"execution_count\\": 26\n  },\n  {\n    \\"id\\": \\"a5de22b87b724fb18431201e9edad921\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"lwe\\",\n    \\"execution_count\\": 27\n  },\n  {\n    \\"id\\": \\"e9ac81dc3c004a9092be232383e0075e\\",\n    \\"cell_type\\": \\"code\\",\n    \\"source\\": \\"\\",\n    \\"execution_count\\": null\n  }\n]\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T09:59:02.653Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"a47800e62cbe40c1ad4003b2879f5f03\",\"cell_num\":1,\"cell_source\":\"!pip install pandas\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T09:59:03.475Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"a47800e62cbe40c1ad4003b2879f5f03\",\"cell_num\":2,\"cell_source\":\"!pip install pandas\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":649}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T09:59:05.263Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"832d6ff5591b46a0ab57d4f57fb6bff4\",\"cell_num\":2,\"cell_source\":\"!pip install sklearn\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T09:59:06.018Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"832d6ff5591b46a0ab57d4f57fb6bff4\",\"cell_num\":3,\"cell_source\":\"!pip install sklearn\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":94}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T09:59:07.566Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"da13661b37a24a319d339a52b96bd0c7\",\"cell_num\":3,\"cell_source\":\"!pip install catboost\n!pip install xgboost\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T09:59:09.122Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"da13661b37a24a319d339a52b96bd0c7\",\"cell_num\":4,\"cell_source\":\"!pip install catboost\n!pip install xgboost\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2732}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T09:59:14.729Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fcbfe01318394ee78c110d6efe344931\",\"cell_num\":5,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T09:59:14.729Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fcbfe01318394ee78c110d6efe344931\",\"cell_num\":5,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ModuleNotFoundError\\",\\"evalue\\":\\"No module named "sklearn"\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:00:46.555Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":0,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:00:46.824Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":1,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":23}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:01.850Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":2,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:04.972Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":0,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:05.250Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":1,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":23}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:07.265Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"903fef7eb83446d29d42de5661e6b7fc\",\"cell_num\":1,\"cell_source\":\"!pip install pandas\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:08.087Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"903fef7eb83446d29d42de5661e6b7fc\",\"cell_num\":2,\"cell_source\":\"!pip install pandas\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":649}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:10.189Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"6ac6db6a5033460180b37f89fc9b8c95\",\"cell_num\":2,\"cell_source\":\"!pip install scikit-learn\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:12.922Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"6ac6db6a5033460180b37f89fc9b8c95\",\"cell_num\":2,\"cell_source\":\"!pip install scikit-learn\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":687}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:12.923Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"6ac6db6a5033460180b37f89fc9b8c95\",\"cell_num\":2,\"cell_source\":\"!pip install scikit-learn\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":687}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:16.119Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"4aa95e6a3e284d6f8ec815340d332de6\",\"cell_num\":3,\"cell_source\":\"!pip install catboost\n!pip install xgboost\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:17.729Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"4aa95e6a3e284d6f8ec815340d332de6\",\"cell_num\":3,\"cell_source\":\"!pip install catboost\n!pip install xgboost\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2732}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:18.917Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":4,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:43.687Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":7,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:53.651Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"3426c5f449ff44df8bbf05dfaaf11f38\",\"cell_num\":5,\"cell_source\":\"import zipfile\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip", "r") as zip_ref:\n    zip_ref.extractall("data/task1")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:01:53.850Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"3426c5f449ff44df8bbf05dfaaf11f38\",\"cell_num\":6,\"cell_source\":\"import zipfile\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip", "r") as zip_ref:\n    zip_ref.extractall("data/task1")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:02:12.120Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":8,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", sep=" -> ")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":387},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:02:12.120Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":8,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ParserError\\",\\"evalue\\":\\"Expected 26 fields in line 5, saw 31. Error could possibly be due to quotes being ignored when a multi-char delimiter is used.\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:02:25.436Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":7,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:02:25.961Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":8,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":7635}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:02:46.864Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":8,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", sep = \\"->\\")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":390},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:02:46.864Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":8,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ParserError\\",\\"evalue\\":\\"Expected 28 fields in line 5, saw 38. Error could possibly be due to quotes being ignored when a multi-char delimiter is used.\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:04:30.736Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":7,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:04:31.273Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":8,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":7635}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:08:41.392Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"create\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":7,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:13:02.290Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":8,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ncolumns = []\n\nfor n,line in enumerate(lines):\n    if n>3:\n        break\n    line = line.strip()\n    if line:\n        parts = line.split(":")\n        print(parts)\n        ids.append(parts[0].strip())\n        print(ids)\n#         columns.append([col.strip().split(" ")[0] for col in parts[1].strip().split(",")])\n\n# Create the DataFrame\n# df = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\n# print(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:13:02.418Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":9,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ncolumns = []\n\nfor n,line in enumerate(lines):\n    if n>3:\n        break\n    line = line.strip()\n    if line:\n        parts = line.split(":")\n        print(parts)\n        ids.append(parts[0].strip())\n        print(ids)\n#         columns.append([col.strip().split(" ")[0] for col in parts[1].strip().split(",")])\n\n# Create the DataFrame\n# df = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\n# print(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":3232}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:14:46.421Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"create\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":7,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:02.611Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":8,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nl = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:02.718Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":9,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nl = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:05.522Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"create\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":8,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:07.290Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:07.328Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":19}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:43.722Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":8,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\n    \",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:43.756Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":9,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\n    \",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:50.121Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"content\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:15:50.154Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"content\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":954}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:16:20.861Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"content.strip().split(":")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:16:20.918Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"content.strip().split(":")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1227}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:16:39.756Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"content.strip()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:16:39.800Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"content.strip()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":950}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:18:01.822Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"content.strip().split(\\":\\", 1)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:18:01.888Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"content.strip().split(\\":\\", 1)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":957}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:19:22.378Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1].strip().split(" -> ")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:19:22.427Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1].strip().split(" -> ")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":993}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:19:57.480Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1].replace("-->", "->")\nl[1].strip().split(" -> ")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:19:57.525Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1].replace("-->", "->")\nl[1].strip().split(" -> ")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":993}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:20:06.469Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->")\nl[1].strip().split(" -> ")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:20:06.512Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->")\nl[1].strip().split(" -> ")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":994}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:20:20.291Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->")\nl[1].strip().split("->")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:20:20.337Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->")\nl[1].strip().split("->")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1050}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:20:39.763Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:20:39.817Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:20:44.580Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:20:44.621Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1050}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:21:00.961Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1].map(strip)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:21:00.961Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""list" object has no attribute "map"\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:21:26.626Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(l[1], strip)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:21:26.626Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "strip" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:21:30.563Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(l[1], strip())\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:21:30.563Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "strip" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:21:51.680Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(l[1], lambda x: x.strip())\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:21:51.680Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\""function" object is not iterable\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:05.630Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(strip, l[1])\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:22:05.630Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "strip" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:10.246Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(strip(, l[1])\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:22:10.246Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"SyntaxError\\",\\"evalue\\":\\"invalid syntax (1197973562.py, line 3)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:15.130Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(strip(), l[1])\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:22:15.130Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "strip" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:25.682Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(lambda x: x.strip(), l[1])\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:25.716Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(lambda x: x.strip(), l[1])\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":37}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:36.521Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(lambda x: x.strip(), l[1])\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:36.570Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(lambda x: x.strip(), l[1])\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1050}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:51.342Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl1 = map(lambda x: x.strip(), l[1])\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:22:51.390Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl1 = map(lambda x: x.strip(), l[1])\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:23:07.010Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(lambda x: x.strip(), l[1])\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:23:07.058Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nmap(lambda x: x.strip(), l[1])\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1050}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:23:33.715Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = map(lambda x: x.strip(), l[1])\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:23:33.759Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = map(lambda x: x.strip(), l[1])\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:23:39.381Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = map(lambda x: x.strip(), l[1])\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:23:39.416Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = map(lambda x: x.strip(), l[1])\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":37}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:24:00.806Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip(), l[1]))\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:24:00.853Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip(), l[1]))\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":997}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:24:37.253Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip()..split(\\" \\", 1), l[1]))\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T10:24:37.253Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"SyntaxError\\",\\"evalue\\":\\"invalid syntax (1439251288.py, line 3)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:24:41.238Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:24:41.275Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1134}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:25:28.632Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\ncolumns = [t[0] for t in l[1]]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:25:28.676Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\ncolumns = [t[0] for t in l[1]]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:25:35.612Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\ncolumns = [t[0] for t in l[1]]\ncolumns\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T10:25:35.651Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\ncolumns = [t[0] for t in l[1]]\ncolumns\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":403}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:04:23.599Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:04:23.651Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl[1]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1134}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:05:35.279Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:05:35.332Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:05:38.452Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:05:38.490Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1176}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:07:37.200Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nprpnt(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:07:37.200Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "prpnt" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:07:42.071Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nprint(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:07:42.116Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nl[1] = l[1].replace("-->", "->").strip().split("->")\nprint(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":983}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:07:58.555Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nprint(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\nprint(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:07:58.608Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nprint(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\nprint(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1908}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:14:57.553Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>3:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append[l1, [], [], ""]\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        actions = [t[0] for t in l[1]]\n        timestamps = [t[1] for t in l[1]]\n        if actions[-1] == "END":\n            actions = actions[:-1]\n            data[-1] = timestamps[-1]\n            timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:14:57.553Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\""builtin_function_or_method" object is not subscriptable\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:15:10.027Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>3:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l1, [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        actions = [t[0] for t in l[1]]\n        timestamps = [t[1] for t in l[1]]\n        if actions[-1] == "END":\n            actions = actions[:-1]\n            data[-1] = timestamps[-1]\n            timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:15:10.027Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"IndexError\\",\\"evalue\\":\\"list index out of range\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:15:42.344Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>3:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l1, [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l)\n#         actions = [t[0] for t in l[1]]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:15:42.473Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>3:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l1, [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l)\n#         actions = [t[0] for t in l[1]]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":3155}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:15:45.939Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>3:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l1, [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n#         actions = [t[0] for t in l[1]]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:15:46.054Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>3:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l1, [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n#         actions = [t[0] for t in l[1]]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":3100}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:15:55.927Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l1, [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n#         actions = [t[0] for t in l[1]]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2468},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:15:55.927Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (4, 1), indices imply (3, 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:16:13.492Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n#         actions = [t[0] for t in l[1]]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2468},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:16:13.492Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (4, 1), indices imply (3, 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:18:59.552Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n        actions = l[1,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1067},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:18:59.552Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:19:13.495Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1067},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:19:13.495Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:19:46.677Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = np.array(line.split(\\":\\", 1))\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:19:46.677Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "np" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:19:59.761Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":4,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:19:59.788Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":5,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:20:05.280Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = np.array(line.split(\\":\\", 1))\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:20:05.280Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"setting an array element with a sequence\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:20:35.320Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = np.array(line.split(\\":\\", 1))\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = np.array(l[1].replace("-->", "->").strip().split("->"))\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:20:35.320Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"setting an array element with a sequence\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:20:57.531Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":31},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:20:57.531Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:21:19.306Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1])))\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:21:19.306Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (28,) + inhomogeneous part.\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:21:27.954Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1067},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:21:27.954Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:21:58.931Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1])))\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:21:58.931Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (28,) + inhomogeneous part.\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:22:14.699Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n        actions = l[:,0]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1060},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:22:14.699Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:22:36.001Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n        actions = l[:,:1]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1060},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:22:36.001Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:23:05.084Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n        actions = l[1][:1]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2391},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:23:05.084Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (4, 1), indices imply (3, 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:23:22.606Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n        actions = l[1][1,:1]\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2391},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:23:22.606Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (4, 1), indices imply (3, 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:23:50.410Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n        actions = l[1][1,:1]\n        print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2433},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:23:50.410Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (4, 1), indices imply (3, 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:23:55.595Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        \n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n        actions = l[1][1,:1]\n        print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2433},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:23:55.595Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (4, 1), indices imply (3, 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:24:35.250Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n        actions = l[1][1,:1]\n        print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2462},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:24:35.250Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (4, 1), indices imply (3, 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:25:23.435Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n#         l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n#         print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(columns, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":31},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:25:23.435Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (4, 1), indices imply (3, 1)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:25:29.203Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n#         l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n#         print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:25:29.321Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n#         l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n#         print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":315}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:25:39.900Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n#         l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n#         print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:25:40.016Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n#         l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n#         print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\nprint(df)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":470}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:25:50.544Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n#         l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n#         print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:25:50.678Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n#         l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n#         print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":31},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:26:33.612Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:26:33.760Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":52},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:26:41.358Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:,:1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:26:41.502Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:,:1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":16825},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:26:51.281Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:26:51.391Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":55},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:26:56.045Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:26:56.168Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":16825},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:28:34.387Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:, 1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":11},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:28:34.387Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"IndexError\\",\\"evalue\\":\\"index 1 is out of bounds for axis 1 with size 1\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:28:41.057Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:, :1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:28:41.206Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:, :1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":16825},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:28:55.456Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:28:55.580Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":55},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:28:58.522Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:3])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:28:58.632Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:3])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":103},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:29:13.692Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1,:1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":11},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:29:13.692Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:29:17.688Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:29:17.815Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":16825},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:29:42.742Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:29:42.856Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n#         l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":14711},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:30:01.013Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:30:01.164Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":2497},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:30:09.563Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1, :1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":11},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:30:09.563Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:30:17.449Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1][:, 1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":11},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:30:17.449Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:30:20.230Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n        print(l[1][:, :1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":11},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:30:20.230Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"list indices must be integers or slices, not tuple\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:30:35.459Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1])))\n        print(l[1][:, :1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":11},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:30:35.459Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (28,) + inhomogeneous part.\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:31:00.191Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:, :1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:31:00.297Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\nids = []\ndata = []\ncolumns = ["raw", "actions", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>2:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids.append(l[0].strip())\n        print(l[0])\n        data.append([l[1], [], [], ""])\n        l[1] = l[1].replace("-->", "->").strip().split("->")\n        l[1] = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))[:-1])\n        print(l[1][:, :1])\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":956},{\\"output_type\\":\\"execute_result\\",\\"size\\":1496}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:40:07.501Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nprint(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\nprint(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:40:07.553Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nprint(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\nprint(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1908},{\\"output_type\\":\\"execute_result\\",\\"size\\":1134}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:40:17.133Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nprint(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:40:17.187Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\nprint(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":927},{\\"output_type\\":\\"execute_result\\",\\"size\\":1134}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:40:21.501Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:40:21.553Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1134}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:43:15.887Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name", "raw", "timestamps", "end_timestamp"]\n\nfor n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        print(l)\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1720},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:43:15.887Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"7 columns passed, passed data had 4 columns\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:46:12.261Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"create\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":10,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:46:17.847Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name", "raw", "timestamps", "end_timestamp"]\ndata = []\npd.DataFrame(data, index=ids, columns = columns)\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:46:17.847Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"Index(...) must be called with a collection of some kind, "@User140" was passed\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:46:30.437Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name", "raw", "timestamps", "end_timestamp"]\ndata = []\npd.DataFrame(data, columns = columns)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:46:30.547Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name", "raw", "timestamps", "end_timestamp"]\ndata = []\npd.DataFrame(data, columns = columns)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":754}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:46:37.437Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name", "raw", "timestamps", "end_timestamp"]\ndata = []\ndf = pd.DataFrame(data, columns = columns)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:46:37.563Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name", "raw", "timestamps", "end_timestamp"]\ndata = []\ndf = pd.DataFrame(data, columns = columns)\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:46:39.629Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name", "raw", "timestamps", "end_timestamp"]\ndata = []\ndf = pd.DataFrame(data, columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:46:39.740Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name", "raw", "timestamps", "end_timestamp"]\ndata = []\ndf = pd.DataFrame(data, columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":754}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:48:40.662Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"create\",\"cell_index\":\"8ffafcc239bf4df9975b4036b0e5edb8\",\"cell_num\":11,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:50:39.332Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(i) == 2:\n                print(action)\n                data.append(i)\n#                 data.append(l[])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:50:39.332Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"object of type "int" has no len()\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:50:51.471Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n                print(action)\n                data.append(i)\n#                 data.append(l[])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":40},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:50:51.471Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"cannot set a row with mismatched columns\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:51:39.167Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\n\ndf = pd.DataFrame(data, columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:51:39.167Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"Shape of passed values is (2, 1), indices imply (2, 4)\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:52:08.495Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\n\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:52:08.628Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\n\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":645}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:53:12.266Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n                print(action)\n                data.append(i)\n                data.append(action[1])\n                data.append(action[0])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1674},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:53:12.266Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"Index(...) must be called with a collection of some kind, "@User140" was passed\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:53:18.864Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1])\n                data.append(action[0])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\n# Create the DataFrame\ndf = pd.DataFrame(data, index=ids, columns = columns)\n\n# # Display the DataFrame\ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:53:18.864Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"TypeError\\",\\"evalue\\":\\"Index(...) must be called with a collection of some kind, "@User140" was passed\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:53:31.405Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":11,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1])\n                data.append(action[0])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:53:31.468Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1])\n                data.append(action[0])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:53:39.270Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":11,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1])\n                data.append(action[0])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf.head\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:53:39.336Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1])\n                data.append(action[0])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf.head\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":828}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:53:42.137Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":11,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1])\n                data.append(action[0])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:53:42.193Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1])\n                data.append(action[0])\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1639}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:54:33.372Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":11,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip())\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:54:33.457Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip())\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1639}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:55:02.168Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":11,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip())\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:55:02.234Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0]\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip())\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2947}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:56:23.171Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].drop("@")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip()[1:-1])\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:56:23.171Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""str" object has no attribute "drop"\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:57:39.639Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":11,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip()[1:-1])\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:57:39.707Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip()[1:-1])\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":2920}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:57:52.023Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\n\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:57:52.165Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\n\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":645}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:57:54.683Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":11,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip()[1:-1])\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:57:54.750Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    if n>1:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip()[1:-1])\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":9492}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:58:39.049Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\n\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:58:39.181Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\n\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":645}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T11:58:44.450Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n#     if n>1:\n#         break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids]\n            if len(action) == 2:\n#                 print(action)\n                data.append(i)\n                data.append(action[1].strip()[1:-1])\n                data.append(action[0].strip())\n                \n            df.loc[len(df)] = data\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\n        \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T11:58:44.450Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ValueError\\",\\"evalue\\":\\"cannot set a row with mismatched columns\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:22.340Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":0,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:23.618Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":1,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":23}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:23.620Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":1,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":23}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:25.051Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"903fef7eb83446d29d42de5661e6b7fc\",\"cell_num\":1,\"cell_source\":\"!pip install pandas\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:26.084Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"903fef7eb83446d29d42de5661e6b7fc\",\"cell_num\":2,\"cell_source\":\"!pip install pandas\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":649}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:28.790Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":4,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:29.727Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":5,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:31.362Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"3426c5f449ff44df8bbf05dfaaf11f38\",\"cell_num\":5,\"cell_source\":\"import zipfile\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip", "r") as zip_ref:\n    zip_ref.extractall("data/task1")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:31.587Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"3426c5f449ff44df8bbf05dfaaf11f38\",\"cell_num\":6,\"cell_source\":\"import zipfile\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip", "r") as zip_ref:\n    zip_ref.extractall("data/task1")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:34.367Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":7,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:35.009Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":8,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":7635}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:38.754Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":8,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:38.790Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":9,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:43.026Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:43.068Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\nl[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1134}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:49.447Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# l[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:49.480Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# l[1]\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\n# l\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:58.881Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":9,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:02:58.911Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":10,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1176}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:03:04.902Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":10,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:03:04.987Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":11,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":645}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:04:36.368Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"create\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":4,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:04:42.286Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":5,\"cell_source\":\"import time\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:04:42.313Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":6,\"cell_source\":\"import time\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:05:23.937Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":12,\"cell_source\":\"for n, line in enumerate(lines):\n    s = time.time()\n    if n>5:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\nprint(time.time()-s)      \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:05:24.051Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":13,\"cell_source\":\"for n, line in enumerate(lines):\n    s = time.time()\n    if n>5:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\nprint(time.time()-s)      \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"execute_result\\",\\"size\\":2864}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:05:24.052Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":13,\"cell_source\":\"for n, line in enumerate(lines):\n    s = time.time()\n    if n>5:\n        break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])\nprint(time.time()-s)      \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":25},{\\"output_type\\":\\"execute_result\\",\\"size\\":2864}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:07:11.419Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"create\",\"cell_index\":\"26c41fc4c1864ad4814d8ab02d01148f\",\"cell_num\":3,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:07:14.385Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"26c41fc4c1864ad4814d8ab02d01148f\",\"cell_num\":4,\"cell_source\":\"pip install alive-progress\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:07:19.158Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"26c41fc4c1864ad4814d8ab02d01148f\",\"cell_num\":5,\"cell_source\":\"pip install alive-progress\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":1575}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:14.010Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T12:08:14.010Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "tqdm" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:19.941Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":7,\"cell_source\":\"import time\nfrom tqdm import tqdm\n\n\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T12:08:19.941Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":7,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"ModuleNotFoundError\\",\\"evalue\\":\\"No module named "tqdm"\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:27.534Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"create\",\"cell_index\":\"47102fd6b26549aba8cb79078dbbf4b4\",\"cell_num\":4,\"cell_source\":\"\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:35.680Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"47102fd6b26549aba8cb79078dbbf4b4\",\"cell_num\":5,\"cell_source\":\"!pip install tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:37.971Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47102fd6b26549aba8cb79078dbbf4b4\",\"cell_num\":6,\"cell_source\":\"!pip install tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":428}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:44.046Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":13,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:44.170Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":14,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":645}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:48.304Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T12:08:48.304Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"NameError\\",\\"evalue\\":\\"name "tqdm" is not defined\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:52.515Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":7,\"cell_source\":\"import time\nfrom tqdm import tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:08:52.549Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":8,\"cell_source\":\"import time\nfrom tqdm import tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:13:58.834Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":0,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:13:59.126Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":1,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":23}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:01.429Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":6,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:02.446Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":7,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:03.179Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":7,\"cell_source\":\"import time\nfrom tqdm import tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:03.208Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":8,\"cell_source\":\"import time\nfrom tqdm import tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:07.090Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":10,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:07.758Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":11,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":7635}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:10.748Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":11,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:10.781Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":12,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:12.654Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":12,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:12.695Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":13,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1176}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:16.300Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":13,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:14:16.405Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":14,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":645}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:16:34.319Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 3: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:16:34.429Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 3: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":26},{\\"output_type\\":\\"execute_result\\",\\"size\\":2861}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:16:43.054Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 20: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:16:43.335Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 20: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":27},{\\"output_type\\":\\"execute_result\\",\\"size\\":2865}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:16:53.364Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 100: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:16:54.469Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 100: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":28},{\\"output_type\\":\\"execute_result\\",\\"size\\":2878}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:17:25.350Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 100: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = list(map(lambda x: x.strip().split(\\" \\", 1), l))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:17:26.574Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 100: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = list(map(lambda x: x.strip().split(\\" \\", 1), l))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":28},{\\"output_type\\":\\"execute_result\\",\\"size\\":2878}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:18:50.608Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 100: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            l = l.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":22},{\\"output_type\\":\\"error\\",\\"size\\":0}]\"}"[EVENT_SEPARATOR]
"{\"time\":\"2023-05-06T12:18:50.608Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"error\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"{\\"output_type\\":\\"error\\",\\"ename\\":\\"AttributeError\\",\\"evalue\\":\\""list" object has no attribute "strip"\\"}\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:19:03.146Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 100: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            action = action.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:19:04.587Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 100: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            action = action.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":28},{\\"output_type\\":\\"execute_result\\",\\"size\\":2878}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:20:07.881Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 500: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            action = action.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:20:17.226Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 500: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            action = action.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":28},{\\"output_type\\":\\"execute_result\\",\\"size\\":2898}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:20:44.055Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 500: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:20:57.652Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":15,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 500: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        l = np.array(list(map(lambda x: x.strip().split(\\" \\", 1), l)))\n        for i, action in enumerate(l):\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":28},{\\"output_type\\":\\"execute_result\\",\\"size\\":2898}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:21:14.563Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 500: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            action = action.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:21:32.587Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":14,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 500: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            action = action.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":28},{\\"output_type\\":\\"execute_result\\",\\"size\\":2898}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.812Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":8,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.818Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"903fef7eb83446d29d42de5661e6b7fc\",\"cell_num\":8,\"cell_source\":\"# !pip install pandas\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.821Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"6ac6db6a5033460180b37f89fc9b8c95\",\"cell_num\":8,\"cell_source\":\"# !pip install scikit-learn\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.824Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"4aa95e6a3e284d6f8ec815340d332de6\",\"cell_num\":8,\"cell_source\":\"# !pip install catboost\n# !pip install xgboost\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.826Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"26c41fc4c1864ad4814d8ab02d01148f\",\"cell_num\":8,\"cell_source\":\"# pip install alive-progress\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.829Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"47102fd6b26549aba8cb79078dbbf4b4\",\"cell_num\":8,\"cell_source\":\"# !pip install tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.830Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":8,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.830Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":8,\"cell_source\":\"import time\nfrom tqdm import tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.831Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"3426c5f449ff44df8bbf05dfaaf11f38\",\"cell_num\":8,\"cell_source\":\"import zipfile\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip", "r") as zip_ref:\n    zip_ref.extractall("data/task1")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.832Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":8,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.832Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":8,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.833Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":8,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.834Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":8,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:16.834Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":8,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 500: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            action = action.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:17.112Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":18,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":23}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:17.251Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"903fef7eb83446d29d42de5661e6b7fc\",\"cell_num\":18,\"cell_source\":\"# !pip install pandas\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:17.401Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"6ac6db6a5033460180b37f89fc9b8c95\",\"cell_num\":18,\"cell_source\":\"# !pip install scikit-learn\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:17.549Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"4aa95e6a3e284d6f8ec815340d332de6\",\"cell_num\":18,\"cell_source\":\"# !pip install catboost\n# !pip install xgboost\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:18.678Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"26c41fc4c1864ad4814d8ab02d01148f\",\"cell_num\":18,\"cell_source\":\"# pip install alive-progress\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:18.679Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"47102fd6b26549aba8cb79078dbbf4b4\",\"cell_num\":18,\"cell_source\":\"# !pip install tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:18.971Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":18,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:19.102Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":18,\"cell_source\":\"import time\nfrom tqdm import tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:19.434Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"3426c5f449ff44df8bbf05dfaaf11f38\",\"cell_num\":18,\"cell_source\":\"import zipfile\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip", "r") as zip_ref:\n    zip_ref.extractall("data/task1")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:20.207Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":18,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":7635}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:20.329Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":18,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:20.473Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":18,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":1176}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:20.702Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":18,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"execute_result\\",\\"size\\":645}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:27.326Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"finished_execute\",\"cell_index\":\"9596d00ac52f41418d2a2a291fe2929c\",\"cell_num\":18,\"cell_source\":\"for n, line in tqdm(enumerate(lines)):\n    if n > 500: break\n    line = line.strip()\n    if line:\n        l = line.split(\\":\\", 1)\n        ids = l[0].replace("@", "")\n        l = l[1]\n        l = l.replace("-->", "\\t").replace("->", "\\t").strip().split("\\t")\n        for i, action in enumerate(l):\n            action = action.strip().split(\\" \\", 1)\n            data = [ids, -1, "", ""]\n            if len(action) == 2:\n#                 print(action)\n                data[1]= i\n                data[2] = action[1].strip()[1:-1]\n                data[3] = action[0].strip()\n                \n            try: \n                df.loc[len(df)] = data\n            except ValueError: \n                print(data)\n            except:\n                continue\n#         actions = l[1][1,:1]\n#         print(actions)\n#         timestamps = [t[1] for t in l[1]]\n#         if actions[-1] == "END":\n#             actions = actions[:-1]\n#             data[-1] = timestamps[-1]\n#             timestamps = timestamps[:-1]\n        \n#         data.append([col.strip().split(" ")[0] for col in parts[1].strip().split(" -> ")])  \ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":\"[{\\"output_type\\":\\"stream\\",\\"size\\":28},{\\"output_type\\":\\"execute_result\\",\\"size\\":2898}]\"}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.749Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8fd58da2205544c1a978c43701cd5678\",\"cell_num\":14,\"cell_source\":\"# # Do not forget to check if your notebook log collection plugin is working\nfrom mining_extension import check_logging\ncheck_logging(\\"http://3.249.245.244:9999\\")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.750Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"903fef7eb83446d29d42de5661e6b7fc\",\"cell_num\":14,\"cell_source\":\"# !pip install pandas\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.752Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"6ac6db6a5033460180b37f89fc9b8c95\",\"cell_num\":14,\"cell_source\":\"# !pip install scikit-learn\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.759Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"4aa95e6a3e284d6f8ec815340d332de6\",\"cell_num\":14,\"cell_source\":\"# !pip install catboost\n# !pip install xgboost\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.760Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"26c41fc4c1864ad4814d8ab02d01148f\",\"cell_num\":14,\"cell_source\":\"# pip install alive-progress\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.760Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"47102fd6b26549aba8cb79078dbbf4b4\",\"cell_num\":14,\"cell_source\":\"# !pip install tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.761Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"8b87e7fbef694e5d825e7bc0ac797d7d\",\"cell_num\":14,\"cell_source\":\"import pandas as pd\nimport sklearn\nimport catboost\nimport sklearn.feature_extraction.text\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.762Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"7eda39da61164b78a10cdaf2e0142037\",\"cell_num\":14,\"cell_source\":\"import time\nfrom tqdm import tqdm\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.762Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"3426c5f449ff44df8bbf05dfaaf11f38\",\"cell_num\":14,\"cell_source\":\"import zipfile\nwith zipfile.ZipFile("data/task1/jetnet_logs.zip", "r") as zip_ref:\n    zip_ref.extractall("data/task1")\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.763Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"13a28137d1fa416f8fd6beba844021de\",\"cell_num\":14,\"cell_source\":\"data = pd.read_csv("data/task1/jetnet_logs.txt", delimiter="\\t")\ndata.head()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.764Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"9914a74a31554c1f9ea9e0315523e4ee\",\"cell_num\":14,\"cell_source\":\"with open("data/task1/jetnet_logs.txt") as f:\n    content = f.readline()\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.764Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fce82094ae7e44cd863f4db9fb14c77b\",\"cell_num\":14,\"cell_source\":\"l = content.strip().split(\\":\\", 1)\n# print(l[1])\nl[1] = l[1].replace("-->", "->").strip().split("->")\n# print(l[1])\nl[1] = list(map(lambda x: x.strip().split(\\" \\", 1), l[1]))\n# actions = [t[0] for t in l[1]]\n# timestamps = [t[1] for t in l[1]]\nl\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:22:37.766Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"execute\",\"cell_index\":\"fbbe38e963e146ce8584a2f91d572810\",\"cell_num\":14,\"cell_source\":\"f = open("data/task1/jetnet_logs.txt")\nlines = f.readlines()\ncolumns = ["user_id", "session_num", "action_time","action_name"]\ndf = pd.DataFrame([], columns = columns)\ndf\",\"cell_type\":\"code\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
"{\"ip_address\":\"172.29.66.3\",\"time\":\"2023-05-06T12:23:11.530Z\",\"kernel_id\":\"0033f76c-6179-4fb4-a9ce-79112a52b51c\",\"notebook_name\":\"task1.ipynb\",\"event\":\"kernel_restarting\",\"cell_index\":\"\",\"cell_num\":14,\"cell_source\":\"\",\"cell_type\":\"\",\"session_id\":\"7215278a-b19d-477e-82df-9a03bb979fb6\",\"cell_output\":null}"[EVENT_SEPARATOR]
